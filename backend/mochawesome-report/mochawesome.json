{
  "stats": {
    "suites": 3,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-02T00:15:38.797Z",
    "end": "2023-11-02T00:15:39.735Z",
    "duration": 938,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "79df68ca-80fc-4072-97fb-4245444b1e1c",
      "title": "",
      "fullFile": "/Users/ritinmalhotra/repos/capstone-2024/backend/test/users.test.js",
      "file": "/test/users.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c3768dd7-bf8f-4ccb-84be-f3371a54df57",
          "title": "Users API",
          "fullFile": "/Users/ritinmalhotra/repos/capstone-2024/backend/test/users.test.js",
          "file": "/test/users.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da9de542-8d3b-4dc7-b292-5faa7108bd1f",
              "title": "POST /signup",
              "fullFile": "/Users/ritinmalhotra/repos/capstone-2024/backend/test/users.test.js",
              "file": "/test/users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user",
                  "fullTitle": "Users API POST /signup should register a new user",
                  "timedOut": false,
                  "duration": 735,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/users/signup')\n    .send({ email: `${randomEmail}`, password: 'password123', firstName: 'John', lastName: 'Doe' })\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token');\n        done();\n    });",
                  "err": {},
                  "uuid": "5cfd2de7-764d-4c95-ab03-540278c62941",
                  "parentUUID": "da9de542-8d3b-4dc7-b292-5faa7108bd1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register a user with an existing email",
                  "fullTitle": "Users API POST /signup should not register a user with an existing email",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/users/signup')\n    .send({ email: `${randomEmail}`, password: 'password123', firstName: 'John', lastName: 'Doe' })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body).to.have.property('msg', 'User already exists');\n        done();\n    });",
                  "err": {},
                  "uuid": "c04ac5a4-1d55-4c0e-84ab-213a9aa33c74",
                  "parentUUID": "da9de542-8d3b-4dc7-b292-5faa7108bd1f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register a user with invalid email",
                  "fullTitle": "Users API POST /signup should not register a user with invalid email",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/users/signup')\n    .send({ email: 'invalidEmail', password: 'password123', firstName: 'John', lastName: 'Doe' })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        done();\n    });",
                  "err": {},
                  "uuid": "9b26161c-6f97-43d8-9ed9-479a1af25650",
                  "parentUUID": "da9de542-8d3b-4dc7-b292-5faa7108bd1f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5cfd2de7-764d-4c95-ab03-540278c62941",
                "c04ac5a4-1d55-4c0e-84ab-213a9aa33c74",
                "9b26161c-6f97-43d8-9ed9-479a1af25650"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 780,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d7c136c-ea10-427a-99e4-9c8bada6c5d9",
              "title": "POST /login",
              "fullFile": "/Users/ritinmalhotra/repos/capstone-2024/backend/test/users.test.js",
              "file": "/test/users.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should authenticate the user and return token",
                  "fullTitle": "Users API POST /login should authenticate the user and return token",
                  "timedOut": false,
                  "duration": 100,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/users/login')\n    .send({ email: `${randomEmail}`, password: 'password123' })\n    .end((err, res) => {\n        expect(res).to.have.status(200);\n        expect(res.body).to.have.property('token');\n        expect(res.body).to.have.property('userID');\n        done();\n    });",
                  "err": {},
                  "uuid": "1cdb78ff-8cd3-4904-ad24-8e1d506487ea",
                  "parentUUID": "4d7c136c-ea10-427a-99e4-9c8bada6c5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not authenticate with wrong password",
                  "fullTitle": "Users API POST /login should not authenticate with wrong password",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/users/login')\n    .send({ email: 'test@test.com', password: 'wrongpassword' })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body).to.have.property('msg', 'Invalid credentials');\n        done();\n    });",
                  "err": {},
                  "uuid": "86463d48-fb27-4f40-b65f-eb00dbd2fa68",
                  "parentUUID": "4d7c136c-ea10-427a-99e4-9c8bada6c5d9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not authenticate with non-existing email",
                  "fullTitle": "Users API POST /login should not authenticate with non-existing email",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .post('/api/users/login')\n    .send({ email: 'notexist@test.com', password: 'password123' })\n    .end((err, res) => {\n        expect(res).to.have.status(400);\n        expect(res.body).to.have.property('msg', 'Invalid credentials');\n        done();\n    });",
                  "err": {},
                  "uuid": "b01f3703-968c-471b-93a3-e5cc2ae32d06",
                  "parentUUID": "4d7c136c-ea10-427a-99e4-9c8bada6c5d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1cdb78ff-8cd3-4904-ad24-8e1d506487ea",
                "86463d48-fb27-4f40-b65f-eb00dbd2fa68",
                "b01f3703-968c-471b-93a3-e5cc2ae32d06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 152,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}